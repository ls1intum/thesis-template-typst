#import "/utils/todo.typ": TODO

= Related Work
// #TODO[
//   Describe related work regarding your topic and emphasize your (scientific) contribution in contrast to existing approaches / concepts / workflows. Related work is usually current research by others and you defend yourself against the statement: “Why is your thesis relevant? The problem was al- ready solved by XYZ.” If you have multiple related works, use subsections to separate them.
// ]

// Open to improvements

Comprehensive guide to setting up Cypress and developing E2E tests for it can be found in the book by Mwaura @mwaura2021end. The book covers the basics of E2E testing, including the setup of Cypress, writing tests, and running them. It also discusses advanced topics such as testing strategies, debugging, and CI/CD integration. While the book is a valuable resource for developers looking to get started with E2E testing using Cypress, there are no academic sources with such detail about Playwright. Our thesis will cover the setup process of Playwright and best practices for developing end to end tests with it. We highlight the differences between Playwright and Cypress, and demonstrate how to migrate an existing test suite to Playwright.

In their article, Utomo et al. mention the usage of Playwright for end to end testing of a web application in the example of a crowdfunding web platform @utomo2023implementation. The resulting product achieved a high level of user satisfaction and automated end to end testing also contributed to this success. The article emphasises their usage of different browser engines Playwright supports and fast test execution times. Despite their mention of a few Playwright features and benefits, the article does not provide a comprehensive research on the feature set of Playwright. Our thesis will provide a detailed information on the features of Playwright and their benefits.

Parallel execution of software tests offers several benefits that can significantly enhance the testing process. One key advantage is the acceleration of testing procedures. Studies by Schwahn et al. have shown that parallel test execution can lead to a substantial speedup compared to sequential execution, resulting in faster testing cycles @paralleltesting. Moreover, article by Bucur et al. show that parallel execution enables the efficient utilization of resources, making testing more cost-effective @paralleltestexecution. While these researches provide an important insight into benefits of parallel test execution, our thesis will explore it in the context of Playwright, demonstrating how it can improve the efficiency and effectiveness of end-to-end testing.

Test coverage is critical for ensuring that an E2E test suite adequately verifies all aspects of a system. In their paper, Abdelfattah et al. discuss an automated approach for calculating test coverage metrics in microservice systems, focusing on end-to-end (E2E) and API test coverage @testcoverage. The method involves utilizing microservice codebases and system testing traces to automate the calculation of test coverage metrics, providing insights into the level of coverage across microservices. In contrast, the proposed method by this thesis involves defining user workflows and tests for each of them, groupped as test suites, and calculating test coverage per test suite. After that, we display areas lacking tests as a list. This method offers advantages in terms of more accurate test coverage for end to end tests by focusing on user workflows/journeys rather than endpoints accessed or lines of code covered.
