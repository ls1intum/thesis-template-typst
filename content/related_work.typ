#import "/utils/todo.typ": TODO

= Related Work
// #TODO[
//   Describe related work regarding your topic and emphasize your (scientific) contribution in contrast to existing approaches / concepts / workflows. Related work is usually current research by others and you defend yourself against the statement: “Why is your thesis relevant? The problem was al- ready solved by XYZ.” If you have multiple related works, use subsections to separate them.
// ]

Mwaura's book provides comprehensive guidance on configuring Cypress and creating end-to-end (E2E) tests @mwaura2021end. The book covers the fundamentals of E2E testing, such as setting up Cypress, creating tests, and running them. It also covers advanced subjects including test strategies, debugging, and CI/CD integration. While the book is an excellent resource for developers wishing to get started with E2E testing in Cypress, there are no scholarly works that go into such length regarding Playwright. Our thesis will go over the Playwright setup procedure and best practices for creating end-to-end tests with it. We will discuss the differences between Playwright and Cypress and show how to convert an existing test suite to Playwright.

Utomo et al. use a crowdfunding web platform as an example to demonstrate the use of Playwright for end-to-end testing of a web application in their article @utomo2023implementation. The finished product was well-received by users, thanks in part to automated end-to-end testing. The article emphasises their utilisation of several browser engines supported by Playwright, as well as the speed with which tests are executed. Despite mentioning a few Playwright features and benefits, the article does not give in-depth study into the Playwright feature set. Our thesis will go into detail on Playwright's features and benefits.

Parallel execution of software tests has various advantages that can greatly improve the testing process. Schwahn et al. found that parallel test execution can result in significantly faster testing cycles than sequential execution. Furthermore, an article by Bucur et al. demonstrates that parallel execution allows for more efficient resource utilisation, making testing more efficient @paralleltestexecution. While these research provide valuable insights into the advantages of parallel test execution, our thesis will investigate it in the context of Playwright, demonstrating how parallelization can improve the efficiency and efficacy of end-to-end testing.

Test coverage is essential for ensuring that an E2E test suite thoroughly validates all parts of a system. Abdelfattah et al. present an automated technique to computing test coverage metrics in microservice systems, with a focus on end-to-end (E2E) and API test coverage @testcoverage. The method involves using microservice codebases and system testing traces to automate the creation of test coverage metrics, which provides information about the level of coverage across microservices. In contrast, the method suggested in this thesis entails creating user processes and tests for each, grouping them into test suites, and determining test coverage per test suite. We then present a list of places that lack tests. This strategy provides better test coverage for end-to-end tests by focusing on user workflows/journeys rather than endpoints accessed or lines of code covered.